
UnitTest_BLDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002328  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002434  08002434  00012434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002460  08002460  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002460  08002460  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002460  08002460  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002460  08002460  00012460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002464  08002464  00012464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08002474  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002474  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d64  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000190c  00000000  00000000  00028ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  0002a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000757  00000000  00000000  0002b078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017228  00000000  00000000  0002b7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000be62  00000000  00000000  000429f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008731b  00000000  00000000  0004e859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026cc  00000000  00000000  000d5b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d8240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800241c 	.word	0x0800241c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800241c 	.word	0x0800241c

0800014c <BLDC_Drive_RedBoard>:
 */
#include "DriveMotor.h"
#include "stdlib.h"

void BLDC_Drive_RedBoard(MotorDrive *motor,TIM_HandleTypeDef *htim1,int Input,unsigned int Channel1)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
	motor->htim1 = htim1;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	68ba      	ldr	r2, [r7, #8]
 800015e:	601a      	str	r2, [r3, #0]
	motor->Pwm = abs(Input);
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b00      	cmp	r3, #0
 8000164:	bfb8      	it	lt
 8000166:	425b      	neglt	r3, r3
 8000168:	b29a      	uxth	r2, r3
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	683a      	ldr	r2, [r7, #0]
 8000172:	615a      	str	r2, [r3, #20]
	if (Input>0)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	dd2f      	ble.n	80001da <BLDC_Drive_RedBoard+0x8e>
	{
		HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, 1);
 800017a:	2201      	movs	r2, #1
 800017c:	2101      	movs	r1, #1
 800017e:	4831      	ldr	r0, [pc, #196]	; (8000244 <BLDC_Drive_RedBoard+0xf8>)
 8000180:	f000 fd76 	bl	8000c70 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	695b      	ldr	r3, [r3, #20]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d106      	bne.n	800019a <BLDC_Drive_RedBoard+0x4e>
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	89da      	ldrh	r2, [r3, #14]
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, 0);
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
	}
}
 8000198:	e04f      	b.n	800023a <BLDC_Drive_RedBoard+0xee>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	695b      	ldr	r3, [r3, #20]
 800019e:	2b04      	cmp	r3, #4
 80001a0:	d107      	bne.n	80001b2 <BLDC_Drive_RedBoard+0x66>
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	89d9      	ldrh	r1, [r3, #14]
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	460b      	mov	r3, r1
 80001ae:	6393      	str	r3, [r2, #56]	; 0x38
 80001b0:	e043      	b.n	800023a <BLDC_Drive_RedBoard+0xee>
 80001b2:	68fb      	ldr	r3, [r7, #12]
 80001b4:	695b      	ldr	r3, [r3, #20]
 80001b6:	2b08      	cmp	r3, #8
 80001b8:	d107      	bne.n	80001ca <BLDC_Drive_RedBoard+0x7e>
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	89d9      	ldrh	r1, [r3, #14]
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	460b      	mov	r3, r1
 80001c6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80001c8:	e037      	b.n	800023a <BLDC_Drive_RedBoard+0xee>
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	89d9      	ldrh	r1, [r3, #14]
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	460b      	mov	r3, r1
 80001d6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80001d8:	e02f      	b.n	800023a <BLDC_Drive_RedBoard+0xee>
		HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, 0);
 80001da:	2200      	movs	r2, #0
 80001dc:	2101      	movs	r1, #1
 80001de:	4819      	ldr	r0, [pc, #100]	; (8000244 <BLDC_Drive_RedBoard+0xf8>)
 80001e0:	f000 fd46 	bl	8000c70 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	695b      	ldr	r3, [r3, #20]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d106      	bne.n	80001fa <BLDC_Drive_RedBoard+0xae>
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	89da      	ldrh	r2, [r3, #14]
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80001f8:	e01f      	b.n	800023a <BLDC_Drive_RedBoard+0xee>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	695b      	ldr	r3, [r3, #20]
 80001fe:	2b04      	cmp	r3, #4
 8000200:	d107      	bne.n	8000212 <BLDC_Drive_RedBoard+0xc6>
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	89d9      	ldrh	r1, [r3, #14]
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	460b      	mov	r3, r1
 800020e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000210:	e013      	b.n	800023a <BLDC_Drive_RedBoard+0xee>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	2b08      	cmp	r3, #8
 8000218:	d107      	bne.n	800022a <BLDC_Drive_RedBoard+0xde>
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	89d9      	ldrh	r1, [r3, #14]
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	460b      	mov	r3, r1
 8000226:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000228:	e007      	b.n	800023a <BLDC_Drive_RedBoard+0xee>
		__HAL_TIM_SET_COMPARE(motor->htim1,motor->Channel1,motor->Pwm);
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	89d9      	ldrh	r1, [r3, #14]
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	460b      	mov	r3, r1
 8000236:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000238:	e7ff      	b.n	800023a <BLDC_Drive_RedBoard+0xee>
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40010800 	.word	0x40010800

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f000 fa7a 	bl	8000744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000250:	f000 f818 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000254:	f000 f8d2 	bl	80003fc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000258:	f000 f85a 	bl	8000310 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800025c:	2104      	movs	r1, #4
 800025e:	4806      	ldr	r0, [pc, #24]	; (8000278 <main+0x30>)
 8000260:	f001 fa44 	bl	80016ec <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	BLDC_Drive_RedBoard(&BLDC, &htim2, BLDC_TestingPWM, TIM_CHANNEL_2);
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <main+0x34>)
 8000266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800026a:	461a      	mov	r2, r3
 800026c:	2304      	movs	r3, #4
 800026e:	4902      	ldr	r1, [pc, #8]	; (8000278 <main+0x30>)
 8000270:	4803      	ldr	r0, [pc, #12]	; (8000280 <main+0x38>)
 8000272:	f7ff ff6b 	bl	800014c <BLDC_Drive_RedBoard>
 8000276:	e7f5      	b.n	8000264 <main+0x1c>
 8000278:	20000028 	.word	0x20000028
 800027c:	2000008c 	.word	0x2000008c
 8000280:	20000070 	.word	0x20000070

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b090      	sub	sp, #64	; 0x40
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2228      	movs	r2, #40	; 0x28
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f002 f896 	bl	80023c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a6:	2301      	movs	r3, #1
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	2302      	movs	r3, #2
 80002ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	f107 0318 	add.w	r3, r7, #24
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fce7 	bl	8000ca0 <HAL_RCC_OscConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d8:	f000 f8e0 	bl	800049c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	230f      	movs	r3, #15
 80002de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e0:	2302      	movs	r3, #2
 80002e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2102      	movs	r1, #2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 ff54 	bl	80011a4 <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000302:	f000 f8cb 	bl	800049c <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3740      	adds	r7, #64	; 0x40
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08e      	sub	sp, #56	; 0x38
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000324:	f107 0320 	add.w	r3, r7, #32
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
 800033c:	615a      	str	r2, [r3, #20]
 800033e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000340:	4b2d      	ldr	r3, [pc, #180]	; (80003f8 <MX_TIM2_Init+0xe8>)
 8000342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000346:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6;
 8000348:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <MX_TIM2_Init+0xe8>)
 800034a:	2206      	movs	r2, #6
 800034c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034e:	4b2a      	ldr	r3, [pc, #168]	; (80003f8 <MX_TIM2_Init+0xe8>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000354:	4b28      	ldr	r3, [pc, #160]	; (80003f8 <MX_TIM2_Init+0xe8>)
 8000356:	f240 32e7 	movw	r2, #999	; 0x3e7
 800035a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035c:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <MX_TIM2_Init+0xe8>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000362:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <MX_TIM2_Init+0xe8>)
 8000364:	2200      	movs	r2, #0
 8000366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000368:	4823      	ldr	r0, [pc, #140]	; (80003f8 <MX_TIM2_Init+0xe8>)
 800036a:	f001 f8c5 	bl	80014f8 <HAL_TIM_Base_Init>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000374:	f000 f892 	bl	800049c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800037e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000382:	4619      	mov	r1, r3
 8000384:	481c      	ldr	r0, [pc, #112]	; (80003f8 <MX_TIM2_Init+0xe8>)
 8000386:	f001 fc1d 	bl	8001bc4 <HAL_TIM_ConfigClockSource>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000390:	f000 f884 	bl	800049c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000394:	4818      	ldr	r0, [pc, #96]	; (80003f8 <MX_TIM2_Init+0xe8>)
 8000396:	f001 f951 	bl	800163c <HAL_TIM_PWM_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80003a0:	f000 f87c 	bl	800049c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a4:	2300      	movs	r3, #0
 80003a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ac:	f107 0320 	add.w	r3, r7, #32
 80003b0:	4619      	mov	r1, r3
 80003b2:	4811      	ldr	r0, [pc, #68]	; (80003f8 <MX_TIM2_Init+0xe8>)
 80003b4:	f001 ff96 	bl	80022e4 <HAL_TIMEx_MasterConfigSynchronization>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80003be:	f000 f86d 	bl	800049c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c2:	2360      	movs	r3, #96	; 0x60
 80003c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2204      	movs	r2, #4
 80003d6:	4619      	mov	r1, r3
 80003d8:	4807      	ldr	r0, [pc, #28]	; (80003f8 <MX_TIM2_Init+0xe8>)
 80003da:	f001 fb31 	bl	8001a40 <HAL_TIM_PWM_ConfigChannel>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80003e4:	f000 f85a 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003e8:	4803      	ldr	r0, [pc, #12]	; (80003f8 <MX_TIM2_Init+0xe8>)
 80003ea:	f000 f8ab 	bl	8000544 <HAL_TIM_MspPostInit>

}
 80003ee:	bf00      	nop
 80003f0:	3738      	adds	r7, #56	; 0x38
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000028 	.word	0x20000028

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000410:	4b17      	ldr	r3, [pc, #92]	; (8000470 <MX_GPIO_Init+0x74>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a16      	ldr	r2, [pc, #88]	; (8000470 <MX_GPIO_Init+0x74>)
 8000416:	f043 0320 	orr.w	r3, r3, #32
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <MX_GPIO_Init+0x74>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0320 	and.w	r3, r3, #32
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_GPIO_Init+0x74>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a10      	ldr	r2, [pc, #64]	; (8000470 <MX_GPIO_Init+0x74>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_GPIO_Init+0x74>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	603b      	str	r3, [r7, #0]
 800043e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DirBLDC_GPIO_Port, DirBLDC_Pin, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2101      	movs	r1, #1
 8000444:	480b      	ldr	r0, [pc, #44]	; (8000474 <MX_GPIO_Init+0x78>)
 8000446:	f000 fc13 	bl	8000c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DirBLDC_Pin */
  GPIO_InitStruct.Pin = DirBLDC_Pin;
 800044a:	2301      	movs	r3, #1
 800044c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	2301      	movs	r3, #1
 8000450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000456:	2302      	movs	r3, #2
 8000458:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DirBLDC_GPIO_Port, &GPIO_InitStruct);
 800045a:	f107 0308 	add.w	r3, r7, #8
 800045e:	4619      	mov	r1, r3
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_GPIO_Init+0x78>)
 8000462:	f000 fa81 	bl	8000968 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000466:	bf00      	nop
 8000468:	3718      	adds	r7, #24
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000
 8000474:	40010800 	.word	0x40010800

08000478 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d101      	bne.n	800048e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800048a:	f000 f971 	bl	8000770 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40012c00 	.word	0x40012c00

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <Error_Handler+0x8>
	...

080004a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <HAL_MspInit+0x5c>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	4a14      	ldr	r2, [pc, #80]	; (8000504 <HAL_MspInit+0x5c>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6193      	str	r3, [r2, #24]
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <HAL_MspInit+0x5c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <HAL_MspInit+0x5c>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <HAL_MspInit+0x5c>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_MspInit+0x5c>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <HAL_MspInit+0x60>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <HAL_MspInit+0x60>)
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	40021000 	.word	0x40021000
 8000508:	40010000 	.word	0x40010000

0800050c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800051c:	d10b      	bne.n	8000536 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_TIM_Base_MspInit+0x34>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <HAL_TIM_Base_MspInit+0x34>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <HAL_TIM_Base_MspInit+0x34>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40021000 	.word	0x40021000

08000544 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000562:	d117      	bne.n	8000594 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <HAL_TIM_MspPostInit+0x58>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a0c      	ldr	r2, [pc, #48]	; (800059c <HAL_TIM_MspPostInit+0x58>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <HAL_TIM_MspPostInit+0x58>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800057c:	2302      	movs	r3, #2
 800057e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000580:	2302      	movs	r3, #2
 8000582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2302      	movs	r3, #2
 8000586:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	4804      	ldr	r0, [pc, #16]	; (80005a0 <HAL_TIM_MspPostInit+0x5c>)
 8000590:	f000 f9ea 	bl	8000968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000
 80005a0:	40010800 	.word	0x40010800

080005a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08c      	sub	sp, #48	; 0x30
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80005ac:	2300      	movs	r3, #0
 80005ae:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80005b0:	2300      	movs	r3, #0
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005b4:	2300      	movs	r3, #0
 80005b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005ba:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <HAL_InitTick+0xd0>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a2d      	ldr	r2, [pc, #180]	; (8000674 <HAL_InitTick+0xd0>)
 80005c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <HAL_InitTick+0xd0>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005d2:	f107 020c 	add.w	r2, r7, #12
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	4611      	mov	r1, r2
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 ff3d 	bl	800145c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005e2:	f000 ff27 	bl	8001434 <HAL_RCC_GetPCLK2Freq>
 80005e6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ea:	4a23      	ldr	r2, [pc, #140]	; (8000678 <HAL_InitTick+0xd4>)
 80005ec:	fba2 2303 	umull	r2, r3, r2, r3
 80005f0:	0c9b      	lsrs	r3, r3, #18
 80005f2:	3b01      	subs	r3, #1
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005f6:	4b21      	ldr	r3, [pc, #132]	; (800067c <HAL_InitTick+0xd8>)
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <HAL_InitTick+0xdc>)
 80005fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <HAL_InitTick+0xd8>)
 80005fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000602:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000604:	4a1d      	ldr	r2, [pc, #116]	; (800067c <HAL_InitTick+0xd8>)
 8000606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000608:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <HAL_InitTick+0xd8>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <HAL_InitTick+0xd8>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_InitTick+0xd8>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800061c:	4817      	ldr	r0, [pc, #92]	; (800067c <HAL_InitTick+0xd8>)
 800061e:	f000 ff6b 	bl	80014f8 <HAL_TIM_Base_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800062c:	2b00      	cmp	r3, #0
 800062e:	d11b      	bne.n	8000668 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <HAL_InitTick+0xd8>)
 8000632:	f000 ffb1 	bl	8001598 <HAL_TIM_Base_Start_IT>
 8000636:	4603      	mov	r3, r0
 8000638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800063c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000640:	2b00      	cmp	r3, #0
 8000642:	d111      	bne.n	8000668 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000644:	2019      	movs	r0, #25
 8000646:	f000 f980 	bl	800094a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	d808      	bhi.n	8000662 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000650:	2200      	movs	r2, #0
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	2019      	movs	r0, #25
 8000656:	f000 f95c 	bl	8000912 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <HAL_InitTick+0xe0>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	e002      	b.n	8000668 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000668:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800066c:	4618      	mov	r0, r3
 800066e:	3730      	adds	r7, #48	; 0x30
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	431bde83 	.word	0x431bde83
 800067c:	20000090 	.word	0x20000090
 8000680:	40012c00 	.word	0x40012c00
 8000684:	20000004 	.word	0x20000004

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800068c:	e7fe      	b.n	800068c <NMI_Handler+0x4>

0800068e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <HardFault_Handler+0x4>

08000694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <MemManage_Handler+0x4>

0800069a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
	...

080006d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <TIM1_UP_IRQHandler+0x10>)
 80006de:	f001 f8a7 	bl	8001830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000090 	.word	0x20000090

080006ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006f8:	f7ff fff8 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006fe:	490c      	ldr	r1, [pc, #48]	; (8000730 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a09      	ldr	r2, [pc, #36]	; (8000738 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000714:	4c09      	ldr	r4, [pc, #36]	; (800073c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000722:	f001 fe57 	bl	80023d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000726:	f7ff fd8f 	bl	8000248 <main>
  bx lr
 800072a:	4770      	bx	lr
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000734:	08002468 	.word	0x08002468
  ldr r2, =_sbss
 8000738:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800073c:	200000dc 	.word	0x200000dc

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>
	...

08000744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_Init+0x28>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_Init+0x28>)
 800074e:	f043 0310 	orr.w	r3, r3, #16
 8000752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 f8d1 	bl	80008fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075a:	200f      	movs	r0, #15
 800075c:	f7ff ff22 	bl	80005a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000760:	f7ff fea2 	bl	80004a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40022000 	.word	0x40022000

08000770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x1c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_IncTick+0x20>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	4a03      	ldr	r2, [pc, #12]	; (8000790 <HAL_IncTick+0x20>)
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	20000008 	.word	0x20000008
 8000790:	200000d8 	.word	0x200000d8

08000794 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <HAL_GetTick+0x10>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	200000d8 	.word	0x200000d8

080007a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	60d3      	str	r3, [r2, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__NVIC_GetPriorityGrouping+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	f003 0307 	and.w	r3, r3, #7
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db0b      	blt.n	8000836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 021f 	and.w	r2, r3, #31
 8000824:	4906      	ldr	r1, [pc, #24]	; (8000840 <__NVIC_EnableIRQ+0x34>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	2001      	movs	r0, #1
 800082e:	fa00 f202 	lsl.w	r2, r0, r2
 8000832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	e000e100 	.word	0xe000e100

08000844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	db0a      	blt.n	800086e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	b2da      	uxtb	r2, r3
 800085c:	490c      	ldr	r1, [pc, #48]	; (8000890 <__NVIC_SetPriority+0x4c>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	0112      	lsls	r2, r2, #4
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	440b      	add	r3, r1
 8000868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800086c:	e00a      	b.n	8000884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4908      	ldr	r1, [pc, #32]	; (8000894 <__NVIC_SetPriority+0x50>)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	f003 030f 	and.w	r3, r3, #15
 800087a:	3b04      	subs	r3, #4
 800087c:	0112      	lsls	r2, r2, #4
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	440b      	add	r3, r1
 8000882:	761a      	strb	r2, [r3, #24]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000e100 	.word	0xe000e100
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	f1c3 0307 	rsb	r3, r3, #7
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	bf28      	it	cs
 80008b6:	2304      	movcs	r3, #4
 80008b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3304      	adds	r3, #4
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d902      	bls.n	80008c8 <NVIC_EncodePriority+0x30>
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3b03      	subs	r3, #3
 80008c6:	e000      	b.n	80008ca <NVIC_EncodePriority+0x32>
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008cc:	f04f 32ff 	mov.w	r2, #4294967295
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43da      	mvns	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	401a      	ands	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	43d9      	mvns	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	4313      	orrs	r3, r2
         );
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3724      	adds	r7, #36	; 0x24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ff4f 	bl	80007a8 <__NVIC_SetPriorityGrouping>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000924:	f7ff ff64 	bl	80007f0 <__NVIC_GetPriorityGrouping>
 8000928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	68b9      	ldr	r1, [r7, #8]
 800092e:	6978      	ldr	r0, [r7, #20]
 8000930:	f7ff ffb2 	bl	8000898 <NVIC_EncodePriority>
 8000934:	4602      	mov	r2, r0
 8000936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff81 	bl	8000844 <__NVIC_SetPriority>
}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff57 	bl	800080c <__NVIC_EnableIRQ>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000968:	b480      	push	{r7}
 800096a:	b08b      	sub	sp, #44	; 0x2c
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097a:	e169      	b.n	8000c50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800097c:	2201      	movs	r2, #1
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	429a      	cmp	r2, r3
 8000996:	f040 8158 	bne.w	8000c4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	4a9a      	ldr	r2, [pc, #616]	; (8000c08 <HAL_GPIO_Init+0x2a0>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d05e      	beq.n	8000a62 <HAL_GPIO_Init+0xfa>
 80009a4:	4a98      	ldr	r2, [pc, #608]	; (8000c08 <HAL_GPIO_Init+0x2a0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d875      	bhi.n	8000a96 <HAL_GPIO_Init+0x12e>
 80009aa:	4a98      	ldr	r2, [pc, #608]	; (8000c0c <HAL_GPIO_Init+0x2a4>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d058      	beq.n	8000a62 <HAL_GPIO_Init+0xfa>
 80009b0:	4a96      	ldr	r2, [pc, #600]	; (8000c0c <HAL_GPIO_Init+0x2a4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d86f      	bhi.n	8000a96 <HAL_GPIO_Init+0x12e>
 80009b6:	4a96      	ldr	r2, [pc, #600]	; (8000c10 <HAL_GPIO_Init+0x2a8>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d052      	beq.n	8000a62 <HAL_GPIO_Init+0xfa>
 80009bc:	4a94      	ldr	r2, [pc, #592]	; (8000c10 <HAL_GPIO_Init+0x2a8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d869      	bhi.n	8000a96 <HAL_GPIO_Init+0x12e>
 80009c2:	4a94      	ldr	r2, [pc, #592]	; (8000c14 <HAL_GPIO_Init+0x2ac>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d04c      	beq.n	8000a62 <HAL_GPIO_Init+0xfa>
 80009c8:	4a92      	ldr	r2, [pc, #584]	; (8000c14 <HAL_GPIO_Init+0x2ac>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d863      	bhi.n	8000a96 <HAL_GPIO_Init+0x12e>
 80009ce:	4a92      	ldr	r2, [pc, #584]	; (8000c18 <HAL_GPIO_Init+0x2b0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d046      	beq.n	8000a62 <HAL_GPIO_Init+0xfa>
 80009d4:	4a90      	ldr	r2, [pc, #576]	; (8000c18 <HAL_GPIO_Init+0x2b0>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d85d      	bhi.n	8000a96 <HAL_GPIO_Init+0x12e>
 80009da:	2b12      	cmp	r3, #18
 80009dc:	d82a      	bhi.n	8000a34 <HAL_GPIO_Init+0xcc>
 80009de:	2b12      	cmp	r3, #18
 80009e0:	d859      	bhi.n	8000a96 <HAL_GPIO_Init+0x12e>
 80009e2:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <HAL_GPIO_Init+0x80>)
 80009e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e8:	08000a63 	.word	0x08000a63
 80009ec:	08000a3d 	.word	0x08000a3d
 80009f0:	08000a4f 	.word	0x08000a4f
 80009f4:	08000a91 	.word	0x08000a91
 80009f8:	08000a97 	.word	0x08000a97
 80009fc:	08000a97 	.word	0x08000a97
 8000a00:	08000a97 	.word	0x08000a97
 8000a04:	08000a97 	.word	0x08000a97
 8000a08:	08000a97 	.word	0x08000a97
 8000a0c:	08000a97 	.word	0x08000a97
 8000a10:	08000a97 	.word	0x08000a97
 8000a14:	08000a97 	.word	0x08000a97
 8000a18:	08000a97 	.word	0x08000a97
 8000a1c:	08000a97 	.word	0x08000a97
 8000a20:	08000a97 	.word	0x08000a97
 8000a24:	08000a97 	.word	0x08000a97
 8000a28:	08000a97 	.word	0x08000a97
 8000a2c:	08000a45 	.word	0x08000a45
 8000a30:	08000a59 	.word	0x08000a59
 8000a34:	4a79      	ldr	r2, [pc, #484]	; (8000c1c <HAL_GPIO_Init+0x2b4>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d013      	beq.n	8000a62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a3a:	e02c      	b.n	8000a96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	623b      	str	r3, [r7, #32]
          break;
 8000a42:	e029      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	623b      	str	r3, [r7, #32]
          break;
 8000a4c:	e024      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	3308      	adds	r3, #8
 8000a54:	623b      	str	r3, [r7, #32]
          break;
 8000a56:	e01f      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	330c      	adds	r3, #12
 8000a5e:	623b      	str	r3, [r7, #32]
          break;
 8000a60:	e01a      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	623b      	str	r3, [r7, #32]
          break;
 8000a6e:	e013      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d105      	bne.n	8000a84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	611a      	str	r2, [r3, #16]
          break;
 8000a82:	e009      	b.n	8000a98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a84:	2308      	movs	r3, #8
 8000a86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	69fa      	ldr	r2, [r7, #28]
 8000a8c:	615a      	str	r2, [r3, #20]
          break;
 8000a8e:	e003      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
          break;
 8000a94:	e000      	b.n	8000a98 <HAL_GPIO_Init+0x130>
          break;
 8000a96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	2bff      	cmp	r3, #255	; 0xff
 8000a9c:	d801      	bhi.n	8000aa2 <HAL_GPIO_Init+0x13a>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	e001      	b.n	8000aa6 <HAL_GPIO_Init+0x13e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	2bff      	cmp	r3, #255	; 0xff
 8000aac:	d802      	bhi.n	8000ab4 <HAL_GPIO_Init+0x14c>
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	e002      	b.n	8000aba <HAL_GPIO_Init+0x152>
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	3b08      	subs	r3, #8
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	210f      	movs	r1, #15
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	401a      	ands	r2, r3
 8000acc:	6a39      	ldr	r1, [r7, #32]
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 80b1 	beq.w	8000c4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae8:	4b4d      	ldr	r3, [pc, #308]	; (8000c20 <HAL_GPIO_Init+0x2b8>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a4c      	ldr	r2, [pc, #304]	; (8000c20 <HAL_GPIO_Init+0x2b8>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b4a      	ldr	r3, [pc, #296]	; (8000c20 <HAL_GPIO_Init+0x2b8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b00:	4a48      	ldr	r2, [pc, #288]	; (8000c24 <HAL_GPIO_Init+0x2bc>)
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	3302      	adds	r3, #2
 8000b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	220f      	movs	r2, #15
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a40      	ldr	r2, [pc, #256]	; (8000c28 <HAL_GPIO_Init+0x2c0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d013      	beq.n	8000b54 <HAL_GPIO_Init+0x1ec>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a3f      	ldr	r2, [pc, #252]	; (8000c2c <HAL_GPIO_Init+0x2c4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d00d      	beq.n	8000b50 <HAL_GPIO_Init+0x1e8>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a3e      	ldr	r2, [pc, #248]	; (8000c30 <HAL_GPIO_Init+0x2c8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d007      	beq.n	8000b4c <HAL_GPIO_Init+0x1e4>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a3d      	ldr	r2, [pc, #244]	; (8000c34 <HAL_GPIO_Init+0x2cc>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d101      	bne.n	8000b48 <HAL_GPIO_Init+0x1e0>
 8000b44:	2303      	movs	r3, #3
 8000b46:	e006      	b.n	8000b56 <HAL_GPIO_Init+0x1ee>
 8000b48:	2304      	movs	r3, #4
 8000b4a:	e004      	b.n	8000b56 <HAL_GPIO_Init+0x1ee>
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	e002      	b.n	8000b56 <HAL_GPIO_Init+0x1ee>
 8000b50:	2301      	movs	r3, #1
 8000b52:	e000      	b.n	8000b56 <HAL_GPIO_Init+0x1ee>
 8000b54:	2300      	movs	r3, #0
 8000b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b58:	f002 0203 	and.w	r2, r2, #3
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	4093      	lsls	r3, r2
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b66:	492f      	ldr	r1, [pc, #188]	; (8000c24 <HAL_GPIO_Init+0x2bc>)
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	492c      	ldr	r1, [pc, #176]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	608b      	str	r3, [r1, #8]
 8000b8c:	e006      	b.n	8000b9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	4928      	ldr	r1, [pc, #160]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b98:	4013      	ands	r3, r2
 8000b9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d006      	beq.n	8000bb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ba8:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	4922      	ldr	r1, [pc, #136]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	60cb      	str	r3, [r1, #12]
 8000bb4:	e006      	b.n	8000bc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	68da      	ldr	r2, [r3, #12]
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	491e      	ldr	r1, [pc, #120]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d006      	beq.n	8000bde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	4918      	ldr	r1, [pc, #96]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	604b      	str	r3, [r1, #4]
 8000bdc:	e006      	b.n	8000bec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	4914      	ldr	r1, [pc, #80]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000be8:	4013      	ands	r3, r2
 8000bea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d021      	beq.n	8000c3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	490e      	ldr	r1, [pc, #56]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	600b      	str	r3, [r1, #0]
 8000c04:	e021      	b.n	8000c4a <HAL_GPIO_Init+0x2e2>
 8000c06:	bf00      	nop
 8000c08:	10320000 	.word	0x10320000
 8000c0c:	10310000 	.word	0x10310000
 8000c10:	10220000 	.word	0x10220000
 8000c14:	10210000 	.word	0x10210000
 8000c18:	10120000 	.word	0x10120000
 8000c1c:	10110000 	.word	0x10110000
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40010000 	.word	0x40010000
 8000c28:	40010800 	.word	0x40010800
 8000c2c:	40010c00 	.word	0x40010c00
 8000c30:	40011000 	.word	0x40011000
 8000c34:	40011400 	.word	0x40011400
 8000c38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_GPIO_Init+0x304>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	43db      	mvns	r3, r3
 8000c44:	4909      	ldr	r1, [pc, #36]	; (8000c6c <HAL_GPIO_Init+0x304>)
 8000c46:	4013      	ands	r3, r2
 8000c48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f47f ae8e 	bne.w	800097c <HAL_GPIO_Init+0x14>
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	372c      	adds	r7, #44	; 0x2c
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	40010400 	.word	0x40010400

08000c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c80:	787b      	ldrb	r3, [r7, #1]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c8c:	e003      	b.n	8000c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c8e:	887b      	ldrh	r3, [r7, #2]
 8000c90:	041a      	lsls	r2, r3, #16
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	611a      	str	r2, [r3, #16]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e272      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 8087 	beq.w	8000dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc0:	4b92      	ldr	r3, [pc, #584]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d00c      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ccc:	4b8f      	ldr	r3, [pc, #572]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d112      	bne.n	8000cfe <HAL_RCC_OscConfig+0x5e>
 8000cd8:	4b8c      	ldr	r3, [pc, #560]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce4:	d10b      	bne.n	8000cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce6:	4b89      	ldr	r3, [pc, #548]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d06c      	beq.n	8000dcc <HAL_RCC_OscConfig+0x12c>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d168      	bne.n	8000dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e24c      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d06:	d106      	bne.n	8000d16 <HAL_RCC_OscConfig+0x76>
 8000d08:	4b80      	ldr	r3, [pc, #512]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a7f      	ldr	r2, [pc, #508]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	e02e      	b.n	8000d74 <HAL_RCC_OscConfig+0xd4>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x98>
 8000d1e:	4b7b      	ldr	r3, [pc, #492]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a7a      	ldr	r2, [pc, #488]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	4b78      	ldr	r3, [pc, #480]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a77      	ldr	r2, [pc, #476]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e01d      	b.n	8000d74 <HAL_RCC_OscConfig+0xd4>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d40:	d10c      	bne.n	8000d5c <HAL_RCC_OscConfig+0xbc>
 8000d42:	4b72      	ldr	r3, [pc, #456]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a71      	ldr	r2, [pc, #452]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b6f      	ldr	r3, [pc, #444]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a6e      	ldr	r2, [pc, #440]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e00b      	b.n	8000d74 <HAL_RCC_OscConfig+0xd4>
 8000d5c:	4b6b      	ldr	r3, [pc, #428]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a6a      	ldr	r2, [pc, #424]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4b68      	ldr	r3, [pc, #416]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a67      	ldr	r2, [pc, #412]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d013      	beq.n	8000da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fd0a 	bl	8000794 <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d84:	f7ff fd06 	bl	8000794 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b64      	cmp	r3, #100	; 0x64
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e200      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d96:	4b5d      	ldr	r3, [pc, #372]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0f0      	beq.n	8000d84 <HAL_RCC_OscConfig+0xe4>
 8000da2:	e014      	b.n	8000dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fcf6 	bl	8000794 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dac:	f7ff fcf2 	bl	8000794 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	; 0x64
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e1ec      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dbe:	4b53      	ldr	r3, [pc, #332]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f0      	bne.n	8000dac <HAL_RCC_OscConfig+0x10c>
 8000dca:	e000      	b.n	8000dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d063      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dda:	4b4c      	ldr	r3, [pc, #304]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00b      	beq.n	8000dfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000de6:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d11c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x18c>
 8000df2:	4b46      	ldr	r3, [pc, #280]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d116      	bne.n	8000e2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfe:	4b43      	ldr	r3, [pc, #268]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d005      	beq.n	8000e16 <HAL_RCC_OscConfig+0x176>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d001      	beq.n	8000e16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e1c0      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e16:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4939      	ldr	r1, [pc, #228]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2a:	e03a      	b.n	8000ea2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d020      	beq.n	8000e76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e34:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fcab 	bl	8000794 <HAL_GetTick>
 8000e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e40:	e008      	b.n	8000e54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e42:	f7ff fca7 	bl	8000794 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e1a1      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e54:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0f0      	beq.n	8000e42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e60:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	4927      	ldr	r1, [pc, #156]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	600b      	str	r3, [r1, #0]
 8000e74:	e015      	b.n	8000ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fc8a 	bl	8000794 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e84:	f7ff fc86 	bl	8000794 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e180      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f0      	bne.n	8000e84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d03a      	beq.n	8000f24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d019      	beq.n	8000eea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_RCC_OscConfig+0x274>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ebc:	f7ff fc6a 	bl	8000794 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ec4:	f7ff fc66 	bl	8000794 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e160      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f0      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f000 faea 	bl	80014bc <RCC_Delay>
 8000ee8:	e01c      	b.n	8000f24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_RCC_OscConfig+0x274>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fc50 	bl	8000794 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef6:	e00f      	b.n	8000f18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fc4c 	bl	8000794 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d908      	bls.n	8000f18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e146      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	42420000 	.word	0x42420000
 8000f14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f18:	4b92      	ldr	r3, [pc, #584]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1e9      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80a6 	beq.w	800107e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f36:	4b8b      	ldr	r3, [pc, #556]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10d      	bne.n	8000f5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b88      	ldr	r3, [pc, #544]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a87      	ldr	r2, [pc, #540]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b85      	ldr	r3, [pc, #532]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5e:	4b82      	ldr	r3, [pc, #520]	; (8001168 <HAL_RCC_OscConfig+0x4c8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d118      	bne.n	8000f9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f6a:	4b7f      	ldr	r3, [pc, #508]	; (8001168 <HAL_RCC_OscConfig+0x4c8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a7e      	ldr	r2, [pc, #504]	; (8001168 <HAL_RCC_OscConfig+0x4c8>)
 8000f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f76:	f7ff fc0d 	bl	8000794 <HAL_GetTick>
 8000f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f7e:	f7ff fc09 	bl	8000794 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b64      	cmp	r3, #100	; 0x64
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e103      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f90:	4b75      	ldr	r3, [pc, #468]	; (8001168 <HAL_RCC_OscConfig+0x4c8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0f0      	beq.n	8000f7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d106      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x312>
 8000fa4:	4b6f      	ldr	r3, [pc, #444]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	4a6e      	ldr	r2, [pc, #440]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6213      	str	r3, [r2, #32]
 8000fb0:	e02d      	b.n	800100e <HAL_RCC_OscConfig+0x36e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x334>
 8000fba:	4b6a      	ldr	r3, [pc, #424]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4a69      	ldr	r2, [pc, #420]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	6213      	str	r3, [r2, #32]
 8000fc6:	4b67      	ldr	r3, [pc, #412]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	4a66      	ldr	r2, [pc, #408]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	f023 0304 	bic.w	r3, r3, #4
 8000fd0:	6213      	str	r3, [r2, #32]
 8000fd2:	e01c      	b.n	800100e <HAL_RCC_OscConfig+0x36e>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	2b05      	cmp	r3, #5
 8000fda:	d10c      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x356>
 8000fdc:	4b61      	ldr	r3, [pc, #388]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	4a60      	ldr	r2, [pc, #384]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6213      	str	r3, [r2, #32]
 8000fe8:	4b5e      	ldr	r3, [pc, #376]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	4a5d      	ldr	r2, [pc, #372]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6213      	str	r3, [r2, #32]
 8000ff4:	e00b      	b.n	800100e <HAL_RCC_OscConfig+0x36e>
 8000ff6:	4b5b      	ldr	r3, [pc, #364]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4a5a      	ldr	r2, [pc, #360]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	f023 0301 	bic.w	r3, r3, #1
 8001000:	6213      	str	r3, [r2, #32]
 8001002:	4b58      	ldr	r3, [pc, #352]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a57      	ldr	r2, [pc, #348]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	f023 0304 	bic.w	r3, r3, #4
 800100c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d015      	beq.n	8001042 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001016:	f7ff fbbd 	bl	8000794 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101c:	e00a      	b.n	8001034 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800101e:	f7ff fbb9 	bl	8000794 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	f241 3288 	movw	r2, #5000	; 0x1388
 800102c:	4293      	cmp	r3, r2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e0b1      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001034:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0ee      	beq.n	800101e <HAL_RCC_OscConfig+0x37e>
 8001040:	e014      	b.n	800106c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fba7 	bl	8000794 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001048:	e00a      	b.n	8001060 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f7ff fba3 	bl	8000794 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	f241 3288 	movw	r2, #5000	; 0x1388
 8001058:	4293      	cmp	r3, r2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e09b      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001060:	4b40      	ldr	r3, [pc, #256]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1ee      	bne.n	800104a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d105      	bne.n	800107e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001072:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a3b      	ldr	r2, [pc, #236]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800107c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 8087 	beq.w	8001196 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b08      	cmp	r3, #8
 8001092:	d061      	beq.n	8001158 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d146      	bne.n	800112a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109c:	4b33      	ldr	r3, [pc, #204]	; (800116c <HAL_RCC_OscConfig+0x4cc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fb77 	bl	8000794 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010aa:	f7ff fb73 	bl	8000794 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e06d      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f0      	bne.n	80010aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d0:	d108      	bne.n	80010e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	4921      	ldr	r1, [pc, #132]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a19      	ldr	r1, [r3, #32]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	430b      	orrs	r3, r1
 80010f6:	491b      	ldr	r1, [pc, #108]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_RCC_OscConfig+0x4cc>)
 80010fe:	2201      	movs	r2, #1
 8001100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff fb47 	bl	8000794 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800110a:	f7ff fb43 	bl	8000794 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e03d      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f0      	beq.n	800110a <HAL_RCC_OscConfig+0x46a>
 8001128:	e035      	b.n	8001196 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_RCC_OscConfig+0x4cc>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fb30 	bl	8000794 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001138:	f7ff fb2c 	bl	8000794 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e026      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x498>
 8001156:	e01e      	b.n	8001196 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d107      	bne.n	8001170 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e019      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
 8001164:	40021000 	.word	0x40021000
 8001168:	40007000 	.word	0x40007000
 800116c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_RCC_OscConfig+0x500>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	429a      	cmp	r2, r3
 8001182:	d106      	bne.n	8001192 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118e:	429a      	cmp	r2, r3
 8001190:	d001      	beq.n	8001196 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000

080011a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e0d0      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011b8:	4b6a      	ldr	r3, [pc, #424]	; (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d910      	bls.n	80011e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c6:	4b67      	ldr	r3, [pc, #412]	; (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 0207 	bic.w	r2, r3, #7
 80011ce:	4965      	ldr	r1, [pc, #404]	; (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d6:	4b63      	ldr	r3, [pc, #396]	; (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d001      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0b8      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d020      	beq.n	8001236 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001200:	4b59      	ldr	r3, [pc, #356]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4a58      	ldr	r2, [pc, #352]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800120a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001218:	4b53      	ldr	r3, [pc, #332]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a52      	ldr	r2, [pc, #328]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001222:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001224:	4b50      	ldr	r3, [pc, #320]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	494d      	ldr	r1, [pc, #308]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	4313      	orrs	r3, r2
 8001234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d040      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d107      	bne.n	800125a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	4b47      	ldr	r3, [pc, #284]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d115      	bne.n	8001282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e07f      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d107      	bne.n	8001272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001262:	4b41      	ldr	r3, [pc, #260]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d109      	bne.n	8001282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e073      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001272:	4b3d      	ldr	r3, [pc, #244]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e06b      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001282:	4b39      	ldr	r3, [pc, #228]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f023 0203 	bic.w	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4936      	ldr	r1, [pc, #216]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001294:	f7ff fa7e 	bl	8000794 <HAL_GetTick>
 8001298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129a:	e00a      	b.n	80012b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800129c:	f7ff fa7a 	bl	8000794 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e053      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 020c 	and.w	r2, r3, #12
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d1eb      	bne.n	800129c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d210      	bcs.n	80012f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 0207 	bic.w	r2, r3, #7
 80012da:	4922      	ldr	r1, [pc, #136]	; (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d001      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e032      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4916      	ldr	r1, [pc, #88]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d009      	beq.n	8001332 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	490e      	ldr	r1, [pc, #56]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001332:	f000 f821 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 8001336:	4602      	mov	r2, r0
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	490a      	ldr	r1, [pc, #40]	; (800136c <HAL_RCC_ClockConfig+0x1c8>)
 8001344:	5ccb      	ldrb	r3, [r1, r3]
 8001346:	fa22 f303 	lsr.w	r3, r2, r3
 800134a:	4a09      	ldr	r2, [pc, #36]	; (8001370 <HAL_RCC_ClockConfig+0x1cc>)
 800134c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_RCC_ClockConfig+0x1d0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f926 	bl	80005a4 <HAL_InitTick>

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40022000 	.word	0x40022000
 8001368:	40021000 	.word	0x40021000
 800136c:	08002434 	.word	0x08002434
 8001370:	20000000 	.word	0x20000000
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <HAL_RCC_GetSysClockFreq+0x94>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d002      	beq.n	80013a8 <HAL_RCC_GetSysClockFreq+0x30>
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d003      	beq.n	80013ae <HAL_RCC_GetSysClockFreq+0x36>
 80013a6:	e027      	b.n	80013f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_RCC_GetSysClockFreq+0x98>)
 80013aa:	613b      	str	r3, [r7, #16]
      break;
 80013ac:	e027      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	0c9b      	lsrs	r3, r3, #18
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d010      	beq.n	80013e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_RCC_GetSysClockFreq+0x94>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	0c5b      	lsrs	r3, r3, #17
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	4a11      	ldr	r2, [pc, #68]	; (8001418 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_RCC_GetSysClockFreq+0x98>)
 80013da:	fb03 f202 	mul.w	r2, r3, r2
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e004      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a0c      	ldr	r2, [pc, #48]	; (800141c <HAL_RCC_GetSysClockFreq+0xa4>)
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	613b      	str	r3, [r7, #16]
      break;
 80013f6:	e002      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_RCC_GetSysClockFreq+0x98>)
 80013fa:	613b      	str	r3, [r7, #16]
      break;
 80013fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013fe:	693b      	ldr	r3, [r7, #16]
}
 8001400:	4618      	mov	r0, r3
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	007a1200 	.word	0x007a1200
 8001414:	0800244c 	.word	0x0800244c
 8001418:	0800245c 	.word	0x0800245c
 800141c:	003d0900 	.word	0x003d0900

08001420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001424:	4b02      	ldr	r3, [pc, #8]	; (8001430 <HAL_RCC_GetHCLKFreq+0x10>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000000 	.word	0x20000000

08001434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001438:	f7ff fff2 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 800143c:	4602      	mov	r2, r0
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	0adb      	lsrs	r3, r3, #11
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	4903      	ldr	r1, [pc, #12]	; (8001458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800144a:	5ccb      	ldrb	r3, [r1, r3]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001450:	4618      	mov	r0, r3
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40021000 	.word	0x40021000
 8001458:	08002444 	.word	0x08002444

0800145c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	220f      	movs	r2, #15
 800146a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_RCC_GetClockConfig+0x58>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0203 	and.w	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_RCC_GetClockConfig+0x58>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_RCC_GetClockConfig+0x58>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_RCC_GetClockConfig+0x58>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	08db      	lsrs	r3, r3, #3
 8001496:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_RCC_GetClockConfig+0x5c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0207 	and.w	r2, r3, #7
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40022000 	.word	0x40022000

080014bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <RCC_Delay+0x34>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <RCC_Delay+0x38>)
 80014ca:	fba2 2303 	umull	r2, r3, r2, r3
 80014ce:	0a5b      	lsrs	r3, r3, #9
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014d8:	bf00      	nop
  }
  while (Delay --);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1e5a      	subs	r2, r3, #1
 80014de:	60fa      	str	r2, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f9      	bne.n	80014d8 <RCC_Delay+0x1c>
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	20000000 	.word	0x20000000
 80014f4:	10624dd3 	.word	0x10624dd3

080014f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e041      	b.n	800158e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7fe fff4 	bl	800050c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2202      	movs	r2, #2
 8001528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3304      	adds	r3, #4
 8001534:	4619      	mov	r1, r3
 8001536:	4610      	mov	r0, r2
 8001538:	f000 fc30 	bl	8001d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d001      	beq.n	80015b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e03a      	b.n	8001626 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2202      	movs	r2, #2
 80015b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a18      	ldr	r2, [pc, #96]	; (8001630 <HAL_TIM_Base_Start_IT+0x98>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00e      	beq.n	80015f0 <HAL_TIM_Base_Start_IT+0x58>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015da:	d009      	beq.n	80015f0 <HAL_TIM_Base_Start_IT+0x58>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <HAL_TIM_Base_Start_IT+0x9c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d004      	beq.n	80015f0 <HAL_TIM_Base_Start_IT+0x58>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a13      	ldr	r2, [pc, #76]	; (8001638 <HAL_TIM_Base_Start_IT+0xa0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d111      	bne.n	8001614 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d010      	beq.n	8001624 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0201 	orr.w	r2, r2, #1
 8001610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001612:	e007      	b.n	8001624 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	40012c00 	.word	0x40012c00
 8001634:	40000400 	.word	0x40000400
 8001638:	40000800 	.word	0x40000800

0800163c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e041      	b.n	80016d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d106      	bne.n	8001668 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f839 	bl	80016da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3304      	adds	r3, #4
 8001678:	4619      	mov	r1, r3
 800167a:	4610      	mov	r0, r2
 800167c:	f000 fb8e 	bl	8001d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d109      	bne.n	8001710 <HAL_TIM_PWM_Start+0x24>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b01      	cmp	r3, #1
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	e022      	b.n	8001756 <HAL_TIM_PWM_Start+0x6a>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b04      	cmp	r3, #4
 8001714:	d109      	bne.n	800172a <HAL_TIM_PWM_Start+0x3e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b01      	cmp	r3, #1
 8001720:	bf14      	ite	ne
 8001722:	2301      	movne	r3, #1
 8001724:	2300      	moveq	r3, #0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	e015      	b.n	8001756 <HAL_TIM_PWM_Start+0x6a>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b08      	cmp	r3, #8
 800172e:	d109      	bne.n	8001744 <HAL_TIM_PWM_Start+0x58>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b01      	cmp	r3, #1
 800173a:	bf14      	ite	ne
 800173c:	2301      	movne	r3, #1
 800173e:	2300      	moveq	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	e008      	b.n	8001756 <HAL_TIM_PWM_Start+0x6a>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b01      	cmp	r3, #1
 800174e:	bf14      	ite	ne
 8001750:	2301      	movne	r3, #1
 8001752:	2300      	moveq	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e05e      	b.n	800181c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d104      	bne.n	800176e <HAL_TIM_PWM_Start+0x82>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800176c:	e013      	b.n	8001796 <HAL_TIM_PWM_Start+0xaa>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2b04      	cmp	r3, #4
 8001772:	d104      	bne.n	800177e <HAL_TIM_PWM_Start+0x92>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800177c:	e00b      	b.n	8001796 <HAL_TIM_PWM_Start+0xaa>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b08      	cmp	r3, #8
 8001782:	d104      	bne.n	800178e <HAL_TIM_PWM_Start+0xa2>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800178c:	e003      	b.n	8001796 <HAL_TIM_PWM_Start+0xaa>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2202      	movs	r2, #2
 8001792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2201      	movs	r2, #1
 800179c:	6839      	ldr	r1, [r7, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fd7c 	bl	800229c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <HAL_TIM_PWM_Start+0x138>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d107      	bne.n	80017be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <HAL_TIM_PWM_Start+0x138>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00e      	beq.n	80017e6 <HAL_TIM_PWM_Start+0xfa>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d0:	d009      	beq.n	80017e6 <HAL_TIM_PWM_Start+0xfa>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a14      	ldr	r2, [pc, #80]	; (8001828 <HAL_TIM_PWM_Start+0x13c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d004      	beq.n	80017e6 <HAL_TIM_PWM_Start+0xfa>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <HAL_TIM_PWM_Start+0x140>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d111      	bne.n	800180a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b06      	cmp	r3, #6
 80017f6:	d010      	beq.n	800181a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001808:	e007      	b.n	800181a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0201 	orr.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40012c00 	.word	0x40012c00
 8001828:	40000400 	.word	0x40000400
 800182c:	40000800 	.word	0x40000800

08001830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b02      	cmp	r3, #2
 8001844:	d122      	bne.n	800188c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b02      	cmp	r3, #2
 8001852:	d11b      	bne.n	800188c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f06f 0202 	mvn.w	r2, #2
 800185c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fa76 	bl	8001d64 <HAL_TIM_IC_CaptureCallback>
 8001878:	e005      	b.n	8001886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 fa69 	bl	8001d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fa78 	bl	8001d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b04      	cmp	r3, #4
 8001898:	d122      	bne.n	80018e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d11b      	bne.n	80018e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 0204 	mvn.w	r2, #4
 80018b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2202      	movs	r2, #2
 80018b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 fa4c 	bl	8001d64 <HAL_TIM_IC_CaptureCallback>
 80018cc:	e005      	b.n	80018da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fa3f 	bl	8001d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fa4e 	bl	8001d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d122      	bne.n	8001934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d11b      	bne.n	8001934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f06f 0208 	mvn.w	r2, #8
 8001904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2204      	movs	r2, #4
 800190a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fa22 	bl	8001d64 <HAL_TIM_IC_CaptureCallback>
 8001920:	e005      	b.n	800192e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fa15 	bl	8001d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fa24 	bl	8001d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	2b10      	cmp	r3, #16
 8001940:	d122      	bne.n	8001988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b10      	cmp	r3, #16
 800194e:	d11b      	bne.n	8001988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f06f 0210 	mvn.w	r2, #16
 8001958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2208      	movs	r2, #8
 800195e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f9f8 	bl	8001d64 <HAL_TIM_IC_CaptureCallback>
 8001974:	e005      	b.n	8001982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f9eb 	bl	8001d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f9fa 	bl	8001d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10e      	bne.n	80019b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d107      	bne.n	80019b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f06f 0201 	mvn.w	r2, #1
 80019ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7fe fd62 	bl	8000478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019be:	2b80      	cmp	r3, #128	; 0x80
 80019c0:	d10e      	bne.n	80019e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019cc:	2b80      	cmp	r3, #128	; 0x80
 80019ce:	d107      	bne.n	80019e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fce9 	bl	80023b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	2b40      	cmp	r3, #64	; 0x40
 80019ec:	d10e      	bne.n	8001a0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f8:	2b40      	cmp	r3, #64	; 0x40
 80019fa:	d107      	bne.n	8001a0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f9be 	bl	8001d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d10e      	bne.n	8001a38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	2b20      	cmp	r3, #32
 8001a26:	d107      	bne.n	8001a38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f06f 0220 	mvn.w	r2, #32
 8001a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fcb4 	bl	80023a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e0ae      	b.n	8001bbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0c      	cmp	r3, #12
 8001a6a:	f200 809f 	bhi.w	8001bac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001aa9 	.word	0x08001aa9
 8001a78:	08001bad 	.word	0x08001bad
 8001a7c:	08001bad 	.word	0x08001bad
 8001a80:	08001bad 	.word	0x08001bad
 8001a84:	08001ae9 	.word	0x08001ae9
 8001a88:	08001bad 	.word	0x08001bad
 8001a8c:	08001bad 	.word	0x08001bad
 8001a90:	08001bad 	.word	0x08001bad
 8001a94:	08001b2b 	.word	0x08001b2b
 8001a98:	08001bad 	.word	0x08001bad
 8001a9c:	08001bad 	.word	0x08001bad
 8001aa0:	08001bad 	.word	0x08001bad
 8001aa4:	08001b6b 	.word	0x08001b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f9d6 	bl	8001e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0208 	orr.w	r2, r2, #8
 8001ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0204 	bic.w	r2, r2, #4
 8001ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6999      	ldr	r1, [r3, #24]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	619a      	str	r2, [r3, #24]
      break;
 8001ae6:	e064      	b.n	8001bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fa1c 	bl	8001f2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6999      	ldr	r1, [r3, #24]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	021a      	lsls	r2, r3, #8
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	619a      	str	r2, [r3, #24]
      break;
 8001b28:	e043      	b.n	8001bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fa65 	bl	8002000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	69da      	ldr	r2, [r3, #28]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 0208 	orr.w	r2, r2, #8
 8001b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	69da      	ldr	r2, [r3, #28]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0204 	bic.w	r2, r2, #4
 8001b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	69d9      	ldr	r1, [r3, #28]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	61da      	str	r2, [r3, #28]
      break;
 8001b68:	e023      	b.n	8001bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 faaf 	bl	80020d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	69da      	ldr	r2, [r3, #28]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	69da      	ldr	r2, [r3, #28]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	69d9      	ldr	r1, [r3, #28]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	021a      	lsls	r2, r3, #8
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	61da      	str	r2, [r3, #28]
      break;
 8001baa:	e002      	b.n	8001bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	75fb      	strb	r3, [r7, #23]
      break;
 8001bb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_TIM_ConfigClockSource+0x1c>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e0b4      	b.n	8001d4a <HAL_TIM_ConfigClockSource+0x186>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c18:	d03e      	beq.n	8001c98 <HAL_TIM_ConfigClockSource+0xd4>
 8001c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c1e:	f200 8087 	bhi.w	8001d30 <HAL_TIM_ConfigClockSource+0x16c>
 8001c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c26:	f000 8086 	beq.w	8001d36 <HAL_TIM_ConfigClockSource+0x172>
 8001c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c2e:	d87f      	bhi.n	8001d30 <HAL_TIM_ConfigClockSource+0x16c>
 8001c30:	2b70      	cmp	r3, #112	; 0x70
 8001c32:	d01a      	beq.n	8001c6a <HAL_TIM_ConfigClockSource+0xa6>
 8001c34:	2b70      	cmp	r3, #112	; 0x70
 8001c36:	d87b      	bhi.n	8001d30 <HAL_TIM_ConfigClockSource+0x16c>
 8001c38:	2b60      	cmp	r3, #96	; 0x60
 8001c3a:	d050      	beq.n	8001cde <HAL_TIM_ConfigClockSource+0x11a>
 8001c3c:	2b60      	cmp	r3, #96	; 0x60
 8001c3e:	d877      	bhi.n	8001d30 <HAL_TIM_ConfigClockSource+0x16c>
 8001c40:	2b50      	cmp	r3, #80	; 0x50
 8001c42:	d03c      	beq.n	8001cbe <HAL_TIM_ConfigClockSource+0xfa>
 8001c44:	2b50      	cmp	r3, #80	; 0x50
 8001c46:	d873      	bhi.n	8001d30 <HAL_TIM_ConfigClockSource+0x16c>
 8001c48:	2b40      	cmp	r3, #64	; 0x40
 8001c4a:	d058      	beq.n	8001cfe <HAL_TIM_ConfigClockSource+0x13a>
 8001c4c:	2b40      	cmp	r3, #64	; 0x40
 8001c4e:	d86f      	bhi.n	8001d30 <HAL_TIM_ConfigClockSource+0x16c>
 8001c50:	2b30      	cmp	r3, #48	; 0x30
 8001c52:	d064      	beq.n	8001d1e <HAL_TIM_ConfigClockSource+0x15a>
 8001c54:	2b30      	cmp	r3, #48	; 0x30
 8001c56:	d86b      	bhi.n	8001d30 <HAL_TIM_ConfigClockSource+0x16c>
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	d060      	beq.n	8001d1e <HAL_TIM_ConfigClockSource+0x15a>
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d867      	bhi.n	8001d30 <HAL_TIM_ConfigClockSource+0x16c>
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d05c      	beq.n	8001d1e <HAL_TIM_ConfigClockSource+0x15a>
 8001c64:	2b10      	cmp	r3, #16
 8001c66:	d05a      	beq.n	8001d1e <HAL_TIM_ConfigClockSource+0x15a>
 8001c68:	e062      	b.n	8001d30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c7a:	f000 faf0 	bl	800225e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	609a      	str	r2, [r3, #8]
      break;
 8001c96:	e04f      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ca8:	f000 fad9 	bl	800225e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cba:	609a      	str	r2, [r3, #8]
      break;
 8001cbc:	e03c      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cca:	461a      	mov	r2, r3
 8001ccc:	f000 fa50 	bl	8002170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2150      	movs	r1, #80	; 0x50
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 faa7 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 8001cdc:	e02c      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cea:	461a      	mov	r2, r3
 8001cec:	f000 fa6e 	bl	80021cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2160      	movs	r1, #96	; 0x60
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fa97 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 8001cfc:	e01c      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f000 fa30 	bl	8002170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2140      	movs	r1, #64	; 0x40
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fa87 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 8001d1c:	e00c      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4619      	mov	r1, r3
 8001d28:	4610      	mov	r0, r2
 8001d2a:	f000 fa7e 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 8001d2e:	e003      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
      break;
 8001d34:	e000      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
	...

08001d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a29      	ldr	r2, [pc, #164]	; (8001e54 <TIM_Base_SetConfig+0xb8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00b      	beq.n	8001dcc <TIM_Base_SetConfig+0x30>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dba:	d007      	beq.n	8001dcc <TIM_Base_SetConfig+0x30>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a26      	ldr	r2, [pc, #152]	; (8001e58 <TIM_Base_SetConfig+0xbc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <TIM_Base_SetConfig+0x30>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a25      	ldr	r2, [pc, #148]	; (8001e5c <TIM_Base_SetConfig+0xc0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d108      	bne.n	8001dde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <TIM_Base_SetConfig+0xb8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00b      	beq.n	8001dfe <TIM_Base_SetConfig+0x62>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dec:	d007      	beq.n	8001dfe <TIM_Base_SetConfig+0x62>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <TIM_Base_SetConfig+0xbc>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d003      	beq.n	8001dfe <TIM_Base_SetConfig+0x62>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <TIM_Base_SetConfig+0xc0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d108      	bne.n	8001e10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <TIM_Base_SetConfig+0xb8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d103      	bne.n	8001e44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	615a      	str	r2, [r3, #20]
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	40012c00 	.word	0x40012c00
 8001e58:	40000400 	.word	0x40000400
 8001e5c:	40000800 	.word	0x40000800

08001e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f023 0201 	bic.w	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f023 0303 	bic.w	r3, r3, #3
 8001e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f023 0302 	bic.w	r3, r3, #2
 8001ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <TIM_OC1_SetConfig+0xc8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d10c      	bne.n	8001ed6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f023 0308 	bic.w	r3, r3, #8
 8001ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <TIM_OC1_SetConfig+0xc8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d111      	bne.n	8001f02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	621a      	str	r2, [r3, #32]
}
 8001f1c:	bf00      	nop
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40012c00 	.word	0x40012c00

08001f2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f023 0210 	bic.w	r2, r3, #16
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f023 0320 	bic.w	r3, r3, #32
 8001f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <TIM_OC2_SetConfig+0xd0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d10d      	bne.n	8001fa8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <TIM_OC2_SetConfig+0xd0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d113      	bne.n	8001fd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	621a      	str	r2, [r3, #32]
}
 8001ff2:	bf00      	nop
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	40012c00 	.word	0x40012c00

08002000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 0303 	bic.w	r3, r3, #3
 8002036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <TIM_OC3_SetConfig+0xd0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10d      	bne.n	800207a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <TIM_OC3_SetConfig+0xd0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d113      	bne.n	80020aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	621a      	str	r2, [r3, #32]
}
 80020c4:	bf00      	nop
 80020c6:	371c      	adds	r7, #28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40012c00 	.word	0x40012c00

080020d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800211e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	031b      	lsls	r3, r3, #12
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a0f      	ldr	r2, [pc, #60]	; (800216c <TIM_OC4_SetConfig+0x98>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d109      	bne.n	8002148 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800213a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	019b      	lsls	r3, r3, #6
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	621a      	str	r2, [r3, #32]
}
 8002162:	bf00      	nop
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	40012c00 	.word	0x40012c00

08002170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	f023 0201 	bic.w	r2, r3, #1
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800219a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f023 030a 	bic.w	r3, r3, #10
 80021ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	621a      	str	r2, [r3, #32]
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f023 0210 	bic.w	r2, r3, #16
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	031b      	lsls	r3, r3, #12
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002208:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	621a      	str	r2, [r3, #32]
}
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	f043 0307 	orr.w	r3, r3, #7
 800224c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800225e:	b480      	push	{r7}
 8002260:	b087      	sub	sp, #28
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002278:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	021a      	lsls	r2, r3, #8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	431a      	orrs	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4313      	orrs	r3, r2
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	609a      	str	r2, [r3, #8]
}
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	2201      	movs	r2, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a1a      	ldr	r2, [r3, #32]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	43db      	mvns	r3, r3
 80022be:	401a      	ands	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a1a      	ldr	r2, [r3, #32]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	431a      	orrs	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	621a      	str	r2, [r3, #32]
}
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e046      	b.n	800238a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00e      	beq.n	800235e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d009      	beq.n	800235e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d004      	beq.n	800235e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a10      	ldr	r2, [pc, #64]	; (800239c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10c      	bne.n	8002378 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	4313      	orrs	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40000400 	.word	0x40000400
 800239c:	40000800 	.word	0x40000800

080023a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <memset>:
 80023c4:	4603      	mov	r3, r0
 80023c6:	4402      	add	r2, r0
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d100      	bne.n	80023ce <memset+0xa>
 80023cc:	4770      	bx	lr
 80023ce:	f803 1b01 	strb.w	r1, [r3], #1
 80023d2:	e7f9      	b.n	80023c8 <memset+0x4>

080023d4 <__libc_init_array>:
 80023d4:	b570      	push	{r4, r5, r6, lr}
 80023d6:	2600      	movs	r6, #0
 80023d8:	4d0c      	ldr	r5, [pc, #48]	; (800240c <__libc_init_array+0x38>)
 80023da:	4c0d      	ldr	r4, [pc, #52]	; (8002410 <__libc_init_array+0x3c>)
 80023dc:	1b64      	subs	r4, r4, r5
 80023de:	10a4      	asrs	r4, r4, #2
 80023e0:	42a6      	cmp	r6, r4
 80023e2:	d109      	bne.n	80023f8 <__libc_init_array+0x24>
 80023e4:	f000 f81a 	bl	800241c <_init>
 80023e8:	2600      	movs	r6, #0
 80023ea:	4d0a      	ldr	r5, [pc, #40]	; (8002414 <__libc_init_array+0x40>)
 80023ec:	4c0a      	ldr	r4, [pc, #40]	; (8002418 <__libc_init_array+0x44>)
 80023ee:	1b64      	subs	r4, r4, r5
 80023f0:	10a4      	asrs	r4, r4, #2
 80023f2:	42a6      	cmp	r6, r4
 80023f4:	d105      	bne.n	8002402 <__libc_init_array+0x2e>
 80023f6:	bd70      	pop	{r4, r5, r6, pc}
 80023f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023fc:	4798      	blx	r3
 80023fe:	3601      	adds	r6, #1
 8002400:	e7ee      	b.n	80023e0 <__libc_init_array+0xc>
 8002402:	f855 3b04 	ldr.w	r3, [r5], #4
 8002406:	4798      	blx	r3
 8002408:	3601      	adds	r6, #1
 800240a:	e7f2      	b.n	80023f2 <__libc_init_array+0x1e>
 800240c:	08002460 	.word	0x08002460
 8002410:	08002460 	.word	0x08002460
 8002414:	08002460 	.word	0x08002460
 8002418:	08002464 	.word	0x08002464

0800241c <_init>:
 800241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241e:	bf00      	nop
 8002420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002422:	bc08      	pop	{r3}
 8002424:	469e      	mov	lr, r3
 8002426:	4770      	bx	lr

08002428 <_fini>:
 8002428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242a:	bf00      	nop
 800242c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242e:	bc08      	pop	{r3}
 8002430:	469e      	mov	lr, r3
 8002432:	4770      	bx	lr
